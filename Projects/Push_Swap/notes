First time:
  2 numbers: always 4 moves
  3 numbers: always 8 moves
  5 numbers: always 16 moves
  100 numbers: always 842 moves
  500 numbers: always 5.600 moves
  1.000 numbers: 12.370 moves
  10.000 numbers: 161.414 moves
  100.000 numbers: 2.004.196 moves

Bottom is Top:
  2 numbers: always 3 moves
  3 numbers: always 6 moves
  5 numbers: always 14 moves
  100 numbers: always 793 moves
  500 numbers: always 5.351 moves
  1.000 numbers: 11.869 moves
  10.000 numbers: 156.414 moves
  100.000 numbers: 1.954.196 moves

Simplify Max/Min + Case Bases 2/3
  2 numbers (1000 tries): max 1 move
  3 numbers (1000 tries): max 5 moves
  5 numbers (1000 tries): max 12 moves
  100 numbers (1000 tries): max 692 moves
  500 numbers (100 tries): max 4.771 moves
  1.000 numbers (100 tries): max 10.671 moves
  10.000 numbers (10 tries): max 143.752 moves
  100.000 numbers: 1.819.389 moves
______________________________
enum TOP_A BOT_A TOP_B BOT_B
structure: list of numbers, position, size, min, max, (calc mid)
is really bot? maybe compare size to actual stack size

2-way avg 1.125 (9/8)
TOP_A ->		max to BOT_A (  ra  )										min to TOP_B (    pb   ) avg 1   (3/8)
BOT_A ->		max to TOP_A ( rra  )										min to TOP_B ( rra  pb ) avg 1.5 (1/8)
TOP_B ->		max to TOP_A (  pa  )										min to BOT_B (    rb   ) avg 1   (3/8)
BOT_B ->		max to TOP_A (rrb pa)										min to TOP_B (   rrb   ) avg 1.5 (1/8)

3-way avg 1.833 (11/6)
TOP_A ->		max to BOT_A (  ra  )		mid to TOP_B (    pb   )		min to BOT_B (  pb rb  ) avg 1.7 (1/4)
BOT_A ->		max to TOP_A ( rra  )		mid to TOP_B ( rra  pb )		min to BOT_B (rra pb rb) avg 2   (1/4)
TOP_B ->		max to TOP_A (  pa  )		mid to BOT_A (  pb  ra )		min to BOT_B (    rb   ) avg 1.7 (1/4)
BOT_B ->		max to TOP_A (rrb pa)		mid to BOT_A (rrb pa ra)		min to TOP_B (   rrb   ) avg 2   (1/4)
______________________________
How to check all 3 size base cases
if (half->size == 6 && half->location == bot_a) bottom_to_top(data, half);
make e ARG="11 10 9   8 7 6   5 4 3   0 1 2"
bot_a_012
top_b_012
top_a_210
bot_b_012

make e ARG="11 9 10   8 6 7   5 3 4   1 0 2"
bot_a_102
top_b_102
top_a_201
bot_b_102

make e ARG="10 11 9   7 8 6   4 5 3   0 2 1"
bot_a_021
top_b_021
top_a_120
bot_b_021
______________________________
EXAMPLES OF DIVISIONS
10 11 12 13
size 4
min 10
mid 12
max 14

10 11
size 2
min 10
mid 10
max 11

12 13
size 2
min 12
mid 12
max 13


10 11 12 13 14
size 5
min 10
mid 12
max 15

10 11 12
size 3
min 10
mid 11
max 12

13 14
size 2
min 13
mid 13
max 14


x ... y
size y - x + 1
min x
mid (y + x) / 2
max y

x ... z
size (y - x) / 2 + 1
min x
mid 
max (y + x) / 2

w ... y
size (y - x + 1) / 2
min (y + x) / 2 + 1
mid 
max y
______________________________

v
8
7
6
5
4
3
2
1
^

v
8 1
7 2
6 3
5 4
^

v
8 5
7 6
^ 1
  2
  3
  4

  v
7 5
8 6
  ^
  1
  2
  3
  4

  v
5 1
6 2
7 3
8 4
  ^

v
4 1
3 2
^
5
6
7
8

  v
3 1
4 2
  ^
5
6
7
8

1
2
3
4
5
6
7
8

______________________________

v
2
8
D
3
E
C
A
1
5
B
7
4
0
9
6
F
^

v
8 6
D 0
E 4
C 7
A 5
B 1
9 3
F 2
^

v
D 9
E B
C A
F 8
^ 6
  0
  4
  7
  5
  1
  3
  2

v v
E C
F D
^ ^
  9
  B
  A
  8
  6
  0
  4
  7
  5
  1
  3
  2

  v
C 9
D B
E A
F 8
  ^
  6
  0
  4
  7
  5
  1
  3
  2

v
A 6
B 0
^
C 4
D 7
E 5
F 1
  3
  2
  v
  9
  8
  ^

  v
8 6
9 0
A 4
B 7
C 5
D 1
E 3
F 2
  ^

v
5 0
7 1
4 3
6 2
^
8
9
A
B
C
D
E
F